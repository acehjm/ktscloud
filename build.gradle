plugins {
//	id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'com.github.acehjm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

ext {
    set('springBootVersion', "2.1.0.RELEASE")
    set('springCloudVersion', "Greenwich.SR4")
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
//        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
//	implementation 'org.springframework.boot.experimental:spring-boot-actuator-autoconfigure-r2dbc'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-amqp'
//	implementation 'org.springframework.boot.experimental:spring-boot-starter-data-r2dbc'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
//	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.springframework.boot:spring-boot-starter-quartz'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
//	implementation 'org.springframework.boot:spring-boot-starter-websocket'
//	implementation 'org.flywaydb:flyway-core'
//	implementation 'org.springframework.cloud:spring-cloud-bus'
//	implementation 'org.springframework.cloud:spring-cloud-config-server'
//	implementation 'org.springframework.cloud:spring-cloud-starter-config'
//	implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
//	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
//	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
//	implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
//	implementation 'org.springframework.cloud:spring-cloud-starter-security'
//	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//	implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
//	implementation 'org.springframework.cloud:spring-cloud-stream'
//	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
//	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
//	implementation 'org.springframework.kafka:spring-kafka'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'dev.miku:r2dbc-mysql'
//	runtimeOnly 'mysql:mysql-connector-java'
        annotationProcessor 'org.projectlombok:lombok'
//	testImplementation('org.springframework.boot:spring-boot-starter-test') {
//		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//	}
//	testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc'
//	testImplementation 'io.projectreactor:reactor-test'
//	testImplementation 'org.springframework.amqp:spring-rabbit-test'
//	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
//	testImplementation 'org.springframework.kafka:spring-kafka-test'
    }

    dependencyManagement {
        imports {
//            mavenBom 'org.springframework.boot.experimental:spring-boot-bom-r2dbc:0.1.0.M2'
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springBootVersion}"
        }
    }

    test {
        useJUnitPlatform()
        enabled(false)
    }

}
